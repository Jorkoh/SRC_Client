import data.local.CategoryId;
import data.local.FiltersId;
import data.local.GameId;
import data.local.entities.RunStatus;
import data.local.entities.VariableAndValueIds;
import kotlin.collections.List;

CREATE TABLE filters (
    id INTEGER AS FiltersId PRIMARY KEY,
    runStatus TEXT AS RunStatus,
    categoryId TEXT AS CategoryId,
    variablesAndValuesIds TEXT AS List<VariableAndValueIds> NOT NULL
);

CREATE TABLE game (
    id TEXT AS GameId PRIMARY KEY,
    abbreviation TEXT NOT NULL,
    name TEXT NOT NULL,
    isSelected INTEGER AS Boolean NOT NULL DEFAULT 0
);

INSERT INTO filters (id, runStatus, categoryId, variablesAndValuesIds)
VALUES (1, "Pending", NULL, "[]");

getSelectedGame:
SELECT *
FROM game
WHERE isSelected = 1;

updateSelectedGameId {
    UPDATE game
    SET isSelected = 0
    WHERE isSelected = 1;

    UPDATE game
    SET isSelected = 1
    WHERE id = ?;
}

getFilters:
SELECT *
FROM filters
LIMIT 1;

updateFilters:
INSERT OR REPLACE INTO filters (id, runStatus, categoryId, variablesAndValuesIds)
VALUES ?;

resetFilters:
UPDATE filters
SET categoryId = NULL,
    variablesAndValuesIds = "[]"
WHERE id = 1;

getGameCount:
SELECT COUNT(*)
FROM game;

getAllGames:
SELECT *
FROM game;

getAllGamesFiltered:
SELECT *
FROM game
WHERE name LIKE '%'||:nameMatch||'%'
LIMIT :limit;

deleteGames:
DELETE FROM game;

insertGame:
INSERT INTO game (id, abbreviation, name)
VALUES ?;